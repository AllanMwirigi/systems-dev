# generated by 64 bit GCC compiler
# gcc -S sample.c 

	.file	"sample.c"
	.text
	.globl	sub
	.type	sub, @function
sub: # int sub(a, b, c, d, e, f, g, h)
# first 6 params are in registers edi,esi,edx,ecx,r8d,r9d
# other 2 params are on the stack
# upon entry into sub, stack top contains g, h
# .....| h | g | PC | 
.LFB0:
	.cfi_startproc
	endbr64
	# establish stack frame
	# no need to shift rsp down since each function has a 128 byte reserved stack area
	# rsp will be shifted downwards if function defines more locals
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	
	# save first 6 params onto the stack
	movl	%edi, -20(%rbp) # a
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -40(%rbp) # f

	# set locals u,v,w at rbp -4 to -12
	movl	$9, -12(%rbp)
	movl	$10, -8(%rbp)
	movl	$11, -4(%rbp)

	# compute a+g+u+v
	movl	-20(%rbp), %edx
	movl	16(%rbp), %eax
	# addl src, dest -> dest += src
	addl	%eax, %edx # g + a
	movl	-12(%rbp), %eax
	addl	%eax, %edx # u + (g+a)
	movl	-8(%rbp), %eax
	addl	%edx, %eax # [u + u + (g+a)] + v; result in eax which is the return value reg

	# did not shift rsp down, so just pop stack to restore rbp
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret # eax
	.cfi_endproc
.LFE0:
	.size	sub, .-sub
	.globl	main
	.type	main, @function
main:
.LFB1:
	.cfi_startproc
	endbr64
	# establish stack frame
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6

	# shift rsp down 48 bytes for locals
	subq	$48, %rsp
	movl	$1, -36(%rbp)
	movl	$2, -32(%rbp)
	movl	$3, -28(%rbp)
	movl	$4, -24(%rbp)
	movl	$5, -20(%rbp)
	movl	$6, -16(%rbp)
	movl	$7, -12(%rbp)
	movl	$8, -8(%rbp)

	# call sub(a, b, c, d, e, f, g, h)
	# first 6 params are in registers
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %r8d
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %esi
	movl	-36(%rbp), %eax

	# push 2 extra params onto stack
	movl	-8(%rbp), %edi
	pushq	%rdi # only low 32 bits
	movl	-12(%rbp), %edi
	pushq	%rdi

	movl	%eax, %edi
	call	sub

	addq	$16, %rsp # pop stack: h,g = 16 bytes
	movl	%eax, -4(%rbp) # return value of sub is in eax, put in i's location

	movl	$0, %eax # return 0 to ctr0.o
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
